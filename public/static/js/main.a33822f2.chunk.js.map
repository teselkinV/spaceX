{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_year","launch_success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a33822f2.chunk.js","sourcesContent":["import React from \"react\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nfunction LaunchItem({\n  launch: {\n    flight_number,\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n  },\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span className={launch_success ? \"text-success\" : \"text-danger\"}>\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LaunchItem;\n","import React from \"react\";\n\nfunction MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mx-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mx-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}\n\nexport default MissionKey;\n","import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissinKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LauncheQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nfunction Launches() {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n  if (loading) return <h4>Loading...</h4>;\n  if (error) console.log(error);\n\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissinKey />\n      <div>\n        {data.launches.map((launch) => (\n          <LaunchItem key={launch.flight_number} launch={launch} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Launches;\n","import React from \"react\";\nimport { useQuery, Query, gql } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nfunction Launch(props) {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number },\n  });\n  if (loading) return <h4>Loading...</h4>;\n  if (error) console.log(error);\n  console.log(data);\n\n  const {\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission: </span>\n        {mission_name}\n      </h1>\n      <h4 className=\"mb-3\">Launch details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight number: {flight_number}</li>\n        <li className=\"list-group-item\">Launch year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch successful:{\" \"}\n          <span className={launch_success ? \"text-success\" : \"text-danger\"}>\n            {launch_success ? \"Yes\" : \"No\"}\n          </span>\n        </li>\n      </ul>\n      <h4 className=\"my-3\">Rocket Details:</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket type: {rocket_type}</li>\n      </ul>\n      <hr />\n      <Link to=\"/\" className=\"btn btn-secondary\">\n        Back\n      </Link>\n    </div>\n  );\n}\n\nexport default Launch;\n","import \"./App.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n} from \"@apollo/client\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <h2 className=\"text-center m-2\">SpaceX</h2>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}